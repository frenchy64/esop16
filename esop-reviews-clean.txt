----------------------- REVIEW 1 ---------------------
PAPER: 14
TITLE: Practical Optional Types for Clojure
AUTHORS: Ambrose Bonnaire-Sergeant, Sam Tobin-Hochstadt and Rowan Davies

OVERALL EVALUATION: 1 (accept)
REVIEWER'S CONFIDENCE: 4 (high)

----------- REVIEW -----------
[PAPER SUMMARY]

This paper attacks a problem of providing types for programs written
in Clojure (a dialect of Lisp), with the corresponding type safety
guarantees. The solution builds on the idea of occurrence typing (OT)
from Tobin-Hochstadt and Felleisen's POPL'08 and ICFP'10 work.

OT is a mechanism to track information about types of specific dynamic
values and refine it through branching control flow of a program by
maintaining a pair of of logical statements, essentially defining what
is known to be true and false about the specific value.

This work applies the idea of OT to provide typing discipline for such
Clojure's features as multi-methods with dynamic dispatch and
heterogeneous hash-maps. The authors make an observation that the way
both these language mechanisms are used relies on taking a specific
conditional branch of execution depending depending on the decidable
property of an examined value (a multi-method target or ; key),
which make them a natural fit for the OT approach. The paper also
describes a way to tackle in the type system interoperability with
Java language, which, however, doesn't seem to require any specific
insights besides careful assignment of (possibly nullable) class types
to references in a program.

The paper presents a number of motivating examples for the developed
framework (dubbed Typed Clojure) and its core type system, explaining
some of the key ideas. It also reports on the practical experience of
adopting Typed Clojure, implemented as a core Clojure library and
requiring enhanced compiler to be type-checked in isolation.

[PAPER EVALUATION AND GENERAL CONCERNS]

I find the problem addressed by this paper interesting and I like the
presented solution, which reuses the idea of occurrence typing in the
novel context. In my opinion, the present work serves as an excellent
demonstration of OT's power, making it scale beyond standard
programming idioms of Typed Racket, and dealing with relevant Clojure
features. Another point in favour of this work is that is comes with a
practical implementation, evaluated on some existing code base.

However, the paper has a number of problems, which, I believe can be
can (and should) be easily fixed before it's accepted for publication:

* The delta between the idea of occurrence typing from ICFP'10 is not
  clearly outlined. Even though Section 3.1 provides a good overview
  of the types with positive/negative facts about them, it would be
  nice to outline semi-formally, what are the specific novel
  additions, which made the idea scale for Clojure features and are
  supposed to be taken away as lessons from this work.

* Explanations of typing for multi-methods and HMaps are not
  particularly clear and are difficult to follow when put in
  prose. One reason for this is the fact that the text somewhat
  frivolously incorporates algorithmic steps ("allow us to pick
  compatible propositions", p.12, "calculates the extra information we
  know", p.17) of checking the typing relation. Perhaps, a clean
  typing derivation with less text would be more explanatory for this
  purpose.

* Continuing the previous point, it is not clear, whether type
  checking in TC is decidable at all and the algorithm can always
  deduce decidable propositions and compute the results of auxiliary
  typing functions, such as "restrict" (Fig.11), which involves
  negation of the existential quantification.

* The paper advertises the supplementary material in several places,
  but doesn't provide any link to it, which, I believe, must be an
  artifact of resubmission. The lack of such material makes it hard to
  evaluate novel insights in the proofs of soundness and check the
  argument it's conducted with, especially, given that it's a big-step
  one (POPL'08 soundness result is established wrt. a small-step
  semantics).

  [UPDATE: During the reviewing process, it has been pointed to me
  that the soundness result in the ICFP'10 paper was established
  wrt. big-step semantics, and the present paper, therefore, improves
  on it by introducing explicit "wrong" terms (and on the expense of
  quit large duplication in the evaluation rules -- perhaps,
  Pretty-Big Step Semantics would be a better fit here). Okay.]

* In page 19, there is a statement "... but cannot check Example 9".
  Does it mean that the type system is too weak to type check one of
  the motivating examples of the very same paper? It makes me wonder,
  which specific patterns of working with HMaps are tackled by the
  approach and which are not. Please, clarify.

* I consider it nice of the authors to admit that some of the
  practical adoption experience didn't go so well, and the clients had
  to eventually give up on using Typed Clojure (Section 5.2). I would
  like to know more about specific patterns, which couldn't be
  supported by the framework and lead to this outcome. Alas, what is
  currently described in the paper is just some generic discussion on
  performance/annotation overhead and a remark on the "comp"
  combinator.

* I would recommend to restructure Section 5.1 and provide tables with
  relevant numbers wrt. case studies instead of plain English text,
  which is difficult to follow in this context. Furthermore, I would
  suggest to make it explicit, what is the standard routine of using
  TC with existing Clojure codebase. For now, I assume, it requires
  compiling core.typed with a standalone TC-aware compiler and using
  it as a sealed namespace from other Clojure code.

That is, the paper can benefit from some revisions, addressing the
concerns I outlined above. Nevertheless, I find the present
contributions worthy of acceptance to ESOP.

[DETAILED QUESTIONS AND COMMENTS]

Below, I list some questions and comments, which are less critical,
but I'd like to see them addressed in the rebuttal and in the writing.

p.5: "Java methods and constructor arguments cannot be passed nil" --
given that nil = null, this statement looks strange, as Java methods
regularly take null as arguments. Please, clarify.

p.6: Does (dissoc k) just remove its argument-entry from a map?

p.9: How symbolic representations of objects in OT relate to Scala's
path-dependent types?

p.12: Formula (3) -- do the positive/negative statements mean that d
is of type Nat, so N_d should be read as a proposition?

p.13: Are Java's generic classes (in particular collections) supported
in TC type checking algorithm?

p.13: The rearrangement of class/method names in Java call forms looks
like a significant simplification for the sake of the name resolution
algorithm. This might work for a compiler, but in an IDE, which should
suggest appropriate methods for completion on-the-fly, such rewriting
wouldn't be possible. Perhaps, it's worth checking how existing
implementations of Clojure IDE support (e.g., in Eclipse and IntelliJ)
"incrementalize" such type checking for the sake of code completion.

p.15: "Then (new[S] F "a/b") is checked against a nilable
conversion..." -- which rule requires this check and why?

p.17: "with o' = x ..." -- which "x" is meant here from the code on
Fig.9?

p.17: What is the type of (defmethod e_m e_v e_f)?

p.17: How overlapping multi-method clauses are handled?

p.17: "\phi''_+ = (Val:en)_x" -- how this proposition calculated?
Does it require evaluating the dispatch function (which is an
identity)?

p.17: "A, a set of keyword keys that are known to be absent" -- how
it's calculated and represented in the type-checking algorithm?

p.19: "The result type is T, and the return object is..." - this is
strange, as Example 4 provided a default value in the map and its type
was String, not T.

p.21: Do "error" terms serves only to specify erroneous Java calls
(which are admitted by the type system)?

p.22. "java.mail" -- perhaps, "javax.mail" is meant.

p.24: "Java Interoperability in Statically Typed Languages" -- a
significant work in this direction has been done in Kotlin:
https://kotlinlang.org/docs/reference/null-safety.html. Perhaps, you
should compare to it.

----------------------- REVIEW 2 ---------------------
PAPER: 14
TITLE: Practical Optional Types for Clojure
AUTHORS: Ambrose Bonnaire-Sergeant, Sam Tobin-Hochstadt and Rowan Davies

OVERALL EVALUATION: 2 (strong accept)
REVIEWER'S CONFIDENCE: 4 (high)

----------- REVIEW -----------
This paper describes an optional type system for Clojure.  After a
clear introduction, section 2 gives a very nice introduction to Typed
Clojure, well done in that it is very comprehensible for readers (like
me) with little exposure to Clojure.  Section 3 presents a formal
model of Typed Clojure in the usual manner --- note that I have not
checked this in any depth, section 4 claims a proof with details
relegated to an appendix, section 5 discusses some experience with
Typed Clojure, section 6 discusses related work, and section 7
concludes.

Overall, I found the paper a joy to read, clearly thought out, well
written, describing complex technical material so that even I could
understand it.   The paper explicitly makes a technical contribution
(extensions to existing Typed Racket techniques to cover typed maps,
nil, and multimethods) but underlying this is also a substantial
practical contribution, in the development of a practical optional
typed system that has been used in practice and in production for a
couple of years.


My main technical comment is that the experience section, claiming two
"case studies" is a little underdone compared with the rest of the
paper. The first case study is a single program, only 800-odd lines of
code; the second study rather more substantial at 19,000 lines I might
call these corpus studies rather than case studies, as the main points
seem to be how often various features are used.  I'm not surprised by
the low usage of multimethods: blowing my own trumpet, I refer you to
Muschevici et al OOPSLA 2008, which found similarly low levels of
actual multiple dispatch across a number of languages.  The second
example more towards a traditional case study with brief descriptions
of the actual company decisions --- the "cases" --- to use and the
abandon Typed Clojure. I think there is a lot more that could be said
here, perhaps for a venue like ICSE or Onward Essays, but that would
be an additional contribution, worth it's own paper.



I also found the footnote on page one particularly lucid in its
delineation of gradual and typing: I think I've used the same term
informally myself. This is also missing a citation however: is this
paper claiming a definition here?  If so (even if just saying these
terms seem to be in us) this should probably be incorporated into the
paper, and so should at least look harder at e.g. work by Siek, Bracha
& others to ground the definitions.

https://news.ycombinator.com/item?id=8595116
https://www.dartlang.org/articles/why-dart-types/

That said, I'm completely sold on the definitions as presented here.
What category do you consider e.g. C# 4.0, or Scala's Dynamic, or
Dart?  Is the additional of an Unknown or Dynamic type in a static
type system enough to make it gradual? If not, why not?  Is "optional"
here a synonym for Bracha's "pluggable" type system --- where the
static type system does not affect the operational semantics of a
correct program?  Why or why not?

The penultimate paragraph of 5.1 also introduces various annotations
and options to disable typechecking that I don't remember being
mentioned earlier in the paper.  One way of thinking about those
annotations is that in fact Typed Clojure actually is a gradual type
system as well as an optional type system, with the annotations
effectively acting as type assumptions which will be checked
dynamically to interact with other untyped code.  As such I think this
point does merit further discussion.




minor points
 - include page numbers in papers sent for review
 - spell Smalltalk, Strongtalk and Gradualtalk correctly!
 - cite Strongtalk, Dimondback Ruby,  (which is optional & gradual as
      I see it, while Strongtalk is just optional) and others.
 - the comparison between HMaps & OCaml row polymorphism could be expanded.
 - I didn't know what Clojure "ann" was. Still don't
 - ditto Kw & Any (p.5)
 - I presume Any is *not* type Dynamic (which accepts any method
 request statically?) I think the paper also mentions type Object: how
 are Any and Object related?
  - p.9 why does 42 have the object "0"
  - p.22 java.mail vs javax.mail?
  - check your bibliography: 1,3,6,12,14,17,22.

To encourage accountability, I'm signing my reviews in 2015. For the
record, I am James Noble, kjx@ecs.vuw.ac.nz.  I apologise for my short
review.

----------------------- REVIEW 3 ---------------------
PAPER: 14
TITLE: Practical Optional Types for Clojure
AUTHORS: Ambrose Bonnaire-Sergeant, Sam Tobin-Hochstadt and Rowan Davies

OVERALL EVALUATION: 1 (accept)
REVIEWER'S CONFIDENCE: 4 (high)

----------- REVIEW -----------
The paper describes an optional typing system for Clojure. The type system is based on occurrence typing, previously used in Typed Racket. However, Clojure supports several features not available in Racket that must be incorporated into the type system for it to be useful: interaction with Java code, heterogeneous maps, and multimethods.

This is a nice paper, well-written and well-motivated. The type system formalization is clear and seems correct. I appreciated the explanation of the typing rules using examples.

Evaluation could be better. Typed Clojure is evaluated on two projects, both of which have some features that are "unusual in our experience". So the question arises if these programs are representative Clojure programs that would be good candidates for optional typing. In addition, the paper mentions, but does not describe, issues with the implementation that caused users in one case study to disable type checking. This should be explained.

Much of the complication of the type system comes from modelling multimethods. However, in the case studies multimethods are not used much. Would a simpler type system serve just as well?

Section 5: "wrapping wrapping"

------------------------------------------------------
