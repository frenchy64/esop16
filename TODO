- Outline delta from ICFP'10
- is OC decidable?

* In page 19, there is a statement "... but cannot check Example 9".

- Section 5.1 provide tables

p.5: "Java methods and constructor arguments cannot be passed nil" --
given that nil = null, this statement looks strange, as Java methods
regularly take null as arguments. Please, clarify.

p.17: "A, a set of keyword keys that are known to be absent" -- how
it's calculated and represented in the type-checking algorithm?

p.19: "The result type is T, and the return object is..." - this is
strange, as Example 4 provided a default value in the map and its type
was String, not T.

p.24: "Java Interoperability in Statically Typed Languages" -- a
significant work in this direction has been done in Kotlin:
https://kotlinlang.org/docs/reference/null-safety.html. Perhaps, you
should compare to it.

- Gradual typing vs optional typing?

 - cite Strongtalk, Dimondback Ruby,  (which is optional & gradual as
      I see it, while Strongtalk is just optional) and others.
 - the comparison between HMaps & OCaml row polymorphism could be expanded.
 - I didn't know what Clojure "ann" was. Still don't
 - ditto Kw & Any (p.5)
 - I presume Any is *not* type Dynamic (which accepts any method
 request statically?) I think the paper also mentions type Object: how
 are Any and Object related?
  - p.9 why does 42 have the object "0"
  - check your bibliography: 1,3,6,12,14,17,22.

- what is consistency
