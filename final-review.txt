We thank our reviewers for their feedback, including reports on
grammatical errors and typos. We address the major issues raised below.

Several reviewers suggest that the type system features presented do
not represent a significant improvement over prior work.

Review B:
> A small step with respect to ICFP'10 (main reason for my overall 
  evaluation).
Review C:
> The main problem is that there are 3 language features you describe
  in detail

We will adjust presentation to make this clearer, but major
innovations include:

1) First, we demonstrate the importance of custom type system design
for bringing type systems to existing dynamically-typed
languages. This continues a tradition seen in systems such as
Strongtalk and Typed Racket, and more recently in Flow, Hack, and
TypeScript. This necessitates coverage of multiple features as used in
real Clojure programs; focussing on one single type system extension 
would be insufficient.

2) The synergy between multimethods and occurrence typing is far from
obvious. As a result, Typed Clojure can effectively typecheck
Clojure's highly-expressive multimethods by leveraging type system
features designed for other purposes, including multimethods using
*arbitrary* dispatch functions. See Example 13 for a notable instance.

3) Repurposing of occurrence typing to prevent null-pointer
exceptions in a JVM language is novel and widely applicable. Previous
systems have either
  1. allowed null pointers everywhere, as in Java, Scala, or OCamlJava, 
  2. relied on runtime boxing to Maybe types (Frege), or
  3. tracked nullable types (Kotlin, Ceylon), but relied on ad-hoc rules 
     that ICFP'10 generalizes to a *compositional* and more expressive
     system.

More generally, we show how occurrence typing scales to
new features such as exceptional control flow and heterogeneous maps
that are crucial to Clojure in practice.

> Many features discussed in Section 2 seem to be expressible in OCaml
  using polymorphic variants -- I miss technical comparison to
  polymorphic variants in OCaml.

Untagged union types in Typed Clojure are related to OCaml polymorphic
variants, but union types have a long history prior to this
paper. However, polymorphic variants cannot support untagged unions in
the form described in Section 2.  More closely related to HMaps are
records, which as review C points out, are insufficient for our
purposes.

> I found this paper lacking in focus and sometimes forgetting to explain 
  some basic things

We will omit irrelevant Clojure features such as 'ns' to help focus
the paper and focus on the crucial features such as multimethods.

> I also wonder how well type checking scales. 

Propositional satisfiability is NP-complete, however optimizations 
developed for Typed Racket avoid the need to solve propositional 
formulas in most cases. In practice, type checking scales to tens 
of thousands of lines of code, as demonstrated in our case studies.

> Fig 6: No dissoc expression? How can empty maps be the only HMap values? 
  And why is there no typing rule for {} expressions?

HMap values include non-empty maps constructed with `assoc`, but we
omit other map literals and dissoc for simplicity. The typing rule for
{} is omitted accidentally.
