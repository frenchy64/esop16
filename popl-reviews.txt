We thank the reviewers for their detailed feedback.  We're glad the
reviewers found Typed Clojure to be "an extremely useful
contribution", "a nice approach to obtain a practical system", and
that our approach is "interesting and well illustrated."

The reviewers primary concerns are with two issues:

1. Is the design, implementation, and evaluation of Typed Clojure a
   significant new contribution?

Review B notes "occurrence typing scales to Clojure without having to
investigate dramatically new results", citing this as a disadvantage.

We disagree---the effectiveness of occurrence typing at handling
Clojure idioms is a strength of our design. Furthermore, while the
relationship between occurrence typing and Clojure now seems
intuitive, the full extent of their synthesis was not initially
obvious.

For example, our work uncovers a strong link between occurrence typing
-- a typing mechanism originally designed for local conditionals --
and Clojure's multimethods, an elaborate control-flow mechanism that
includes arbitrary dynamic dispatch. The ability to reuse the logical
reasoning of occurrence typing for multimethods is both novel and
crucial for Typed Clojure's success. Review A describes this as "not
extremely novel", perhaps because occurrence typing already exists. We
argue that the ability to reuse existing technology in unanticipated
ways is often more valuable than whole-cloth reinvention.

Furthermore, Typed Clojure synthesizes occurrence typing and
heterogeneous maps into a subtle (Figure 9 HMap rules) but extremely
compositional result.  As noted by Review A, heterogeneous maps in
this style are not new -- Krishnamurthi et al's (DLS 2013) TeJaS, a
type system for JavaScript supports similar -- however the combination
with occurrence typing produces novel results which are used in
practice in Typed Clojure--see Example 9 for a demonstration.

2. What questions does the evaluation section answer?

Typed Clojure is fortunate to have real-world users, and we are thus
able to evaluate its effectiveness in these settings. We set out to
answer 3 questions:
  (Q1) Is Typed Clojure viable for use in real-world code?
  (Q2) Are the features detailed in the paper needed for typing
  real-world Clojure programs?
  (Q3) What problems do Typed Clojure users encounter?

As the reviews point out, the importance of the evaluation, and the
questions it answers, are not sufficiently clear in the paper; we will
address this in a revised version.

To answer Q1, we demonstrate the utility of our work by checking
thousands of lines of non-trivial code. While the reviews correctly
point out that much of CircleCI's code base is not typed, the portion
that is contains thousands of lines of production code.

To answer Q2, we see that multimethods, heterogenous maps, and Java
interoperability are all widely used in our sample. Even though
multimethods are not defined in the feeds2imap code, they are
called. The small number of multimethods defined in the CircleCI code
may be misleading---the numbers are similar to 11 interfaces in Java,
with 89 concrete implemenations.

Our answer to Q3 is necessarily more subjective, but describes the
limitations that users encountered and future work to address them.

===================================================================

We now address specific questions from the reviewers.

% The paper says:
% 
%   "(the features) are used on average more than once per typed function"
% 
% but this could also be because only a small fraction of all functions
% are typed functions?

We feel the ~400 typed functions in CircleCI is significant enough to
extrapolate from.

% To strengthen the paper I suggest the authors additionally
% measure, how prevalent these features are in the untyped
% code as well, 

We will include an analysis of idioms in typical untyped code.

% The numeric data (various percentages, etc.) would be easier to
% follow as some sort of stacked graph or pie chart or some such.

We will change the presentation to be visual.

% How does Typed Clojure integrate into the Clojure compiler?

This will be clarified in the prose.

Typed Clojure can be optionally integrated into the compilation
pipeline (via nREPL, an extensible REPL).  We assume this setup for
presentational purposes --- chiefly to avoid mentioning Clojure "type
hints" which complicate the paper significantly.

% p5r "difference betweem (Val K) and K"
% 
% Is this a general observation or is it specific to K?

We will change K to an arbitrary C.

This is a general observation, we are describing the difference
between the types of class literals and types of instances of a class.

% The (Multi ...) type is close to unreadable.

Unfortunately we are unsure how to make multimethod types more readable.

% I was looking for the subtyping Multi <: Fn.

Please see S-PMultiFn (Figure 8), described Section 3.4, "Subtyping".
Multimethods are subtypes of their interface types.

% p10 r, Lemma 1
% 
% I was expecting some relation between the \psi+- and the \psi'+-

To aid with the proof, we split this part of the lemma into 4 parts.
The 2nd part talks about \psi+, and the 3rd part only talks about the
type, where we choose any \psi+' that fits.

% One unanswered practical question is this: how long does the
% typechecker run?

Typechecking is expensive. 

CircleCI's 89 typed namespaces take ~10 minutes to check on CircleCI's
own continuous integration tool, at "x20 parallelism".

feeds2imap's 25 typed namespaces take 30 seconds on a Ubuntu Virtual
Machine with 1GB memory and 2.4GHz Intel Core i5.

%  Section 2.3: the notation ':-' is used without introduction, which
%  I'm guessing means "is of type"?

Yes, we will clarify this.

%   Section 2.4. Is the 'Kw' type built-in?

Yes, it is an alias for the Java class clojure.lang.Keyword.

% Page 5, first line: To me, the "its" here is ambiguous: does it
% refer to the control flow, or the occurrence typing?

"occurrence typing automatically understands control flow that
combines atomic tests already understood by occurrence typing."

% Page 5, "Expressions". "All binding forms introduce fresh
% variables". Isn't that a tautology?

We intend the name of the binding to be 'fresh'. Otherwise nested
'let's typed by T-Let with repeated names will combine in unsound
ways.

We will clarify this in the paper.

% In Section 3, is perhaps too much focus on "what" and not enough
% "why" to provide context for what is new and novel versus what is
% standard.  As an example of this early in the section, the paragraph
% about "Objects" is explicit and detailed about its components but
% not its role in the type system. Is it simply a way to name heap
% objects as an access path?

Precisely, yes. The justification will be elaborated, and Section 3
will focus more or the "why".

% Section 3.6 is potentially an important subsection that discusses
% the symbolic reasoning, but unfortunately it is very terse and is
% disconnected from the thread of the story.

We will discuss only the important examples in 3.6 in greater detail.
