We thank the reviewers for their detailed feedback.  We're glad the
reviewers found Typed Clojure to be "an extremely useful
contribution", "a nice approach to obtain a practical system", and
that our approach is "interesting and well illustrated."

The reviewers primary concerns are with two issues:

1. Is the design, implementation, and evaluation of Typed Clojure a
   significant new contribution?

Review B notes "occurrence typing scales to Clojure without having to
investigate dramatically new results", citing this as a disadvantage.

We disagree---the effectiveness of occurrence typing at handling
Clojure idioms is a strength of our design. Furthermore, while the
relationship between occurrence typing and Clojure now seems
intuitive, the full extent of their synthesis was not initially
obvious.

For example, our work uncovers a strong link between occurrence typing
-- a typing mechanism originally designed for local conditionals --
and Clojure's multimethods, an elaborate control-flow mechanism that
includes arbitrary dynamic dispatch. The ability to reuse the logical
reasoning of occurrence typing for multimethods is both novel and
crucial for Typed Clojure's success. Review A describes this as "not
extremely novel", perhaps because occurrence typing already exists. We
argue that the ability to reuse existing technology in unanticipated
ways is often more valuable than whole-cloth reinvention.

Furthermore, Typed Clojure synthesizes occurrence typing and
heterogeneous maps into a subtle (Figure 9 HMap rules) but extremely
compositional result.  As noted by Review A, heterogeneous maps in
this style are not new -- Krishnamurthi et al's (DLS 2013) TeJaS, a
type system for JavaScript supports similar -- however the combination
with occurrence typing produces novel results which are used in
practice in Typed Clojure--see Example 9 for a demonstration.

2. What questions does the evaluation section answer?

Typed Clojure is fortunate to have real-world users, and we are thus
able to evaluate its effectiveness in these settings. We set out to
answer 3 questions:
  (Q1) Is Typed Clojure viable for use in real-world code?
  (Q2) Are the features detailed in the paper needed for typing
  real-world Clojure programs?
  (Q3) What problems do Typed Clojure users encounter?

As the reviews point out, the importance of the evaluation, and the
questions it answers, are not sufficiently clear in the paper; we will
address this in a revised version.

To answer Q1, we demonstrate the utility of our work by checking
thousands of lines of non-trivial code. While the reviews correctly
point out that much of CircleCI's code base is not typed, the portion
that is contains thousands of lines of production code.

To answer Q2, we see that multimethods, heterogeneous maps, and Java
interoperability are all widely used in our sample. Even though
multimethods are not defined in the feeds2imap code, they are
called. The small number of multimethods defined in the CircleCI code
may be misleading---the numbers are similar to 11 interfaces in Java,
with 89 concrete implementations.

Our answer to Q3 is necessarily more subjective, but describes the
limitations that users encountered and future work to address them.

===================================================================

We now address a few specific questions from the reviewers. The
reviewers also make several suggestions for presentation revisions and
improvements to the evaluation---we will make these changes in a
revised version. In other cases, the reviewers guessed at the correct
meaning of some symbols---always correctly, and we will clarify in the
paper.

REVIEW A: "Could the empirical results also be because only a small fraction
           of all functions are typed functions?"

  Our experience is that the ~400 typed functions in CircleCI is
  representative of the code base.

REVIEW B: How does Typed Clojure integrate into the Clojure compiler?

  Typed Clojure can be optionally integrated into the compilation
  pipeline via an extensible REPL---this is the most straightforward way
  to use it.

REVIEW B: Where is Multi <: Fn subtyping rule?

  See S-PMultiFn (Figure 8).

REVIEW B: How long does the typechecker run?

  Typechecking is expensive. 

  CircleCI's 89 typed namespaces take ~10 minutes to check on CircleCI's
  own continuous integration tool, at "x20 parallelism".

  feeds2imap's 25 typed namespaces take 30 seconds on a Ubuntu Virtual
  Machine with 1GB memory and 2.4GHz Intel Core i5.
