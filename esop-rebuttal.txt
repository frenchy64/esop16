We thank the reviewers for their detailed feedback.  We are thrilled the
reviewers found the paper "a joy to read", "an excellent demonstration 
of occurrence typing's power", and providing a "substantial practical 
contribution".

The reviewers' primary concerns are with three issues:

1. What are the contributions beyond occurrence typing as presented
   in ICFP'10?

As described in Section 1, our overall contributions are

  - a type system for Clojure that support Clojure idioms,
  - a sound formal model for three crucial type system features,
  - an implementation successfully used in practice and industry, and
  - an evaluation of the type system in practice.

There are two main extensions specifically in relation to occurrence typing.

The first is the presentation of HMap's, with support for flow checking
on sub-parts of maps. This required several extra typing rules (Fig. 10)
and subtle, but clean, extensions to the `update` rule (Fig. 12, clauses
4-7).

The second is multimethods, which is mainly contained in the T-DefMethod
typing rule. It is in the same spirit as T-If, which was present in ICFP'10,
but demonstrates occurrence typing extends gracefully to support complex 
control flow patterns.

The main takeaway is that occurrence typing as formulated in ICFP'10
serves as a valuable base to support for the nuances of a Clojure type system,
without any particular foresight from the original authors.

2. Are multimethods worth the extra complexity in the type system, given
   they are used so little in practice?

Yes.

The numbers presented in the evaluation section are possibly misleading.
Even though a low number of multimethods are defined in practice, extending
them via `defmethod` accounts for a large amount of code.

A comparable analogy to a Java code base might be assuming interfaces are
a minor feature if a small number of interfaces are defined, yet a large number
of classes extend them.

As noted in Section 5.1, these multimethods are single-dispatch on a
fixed map entry, which further gives them similar roles as Java interfaces,
which perform single dispatch on the first argument of methods.

3. What is the distinction between optional and gradual typing?

Optional typing refers to type systems that do not enforce type invariants
at runtime, and are comparable to Bracha's "pluggable" type systems (as
suggested by Review 2).

Typed Clojure does not check assumptions at runtime, thus is not
gradually typed in any sense, just optionally typed like TypeScript.

Review 2 requests to categorize the following:
 - C# 4.0 is gradually typed. 
 - Scala's Dynamic is an unrelated metaprogramming construct, 
   comparable to a statically resolved "method_missing" in Ruby. 
 - Dart is optionally typed.

A gradual type system is defined by its operational semantics, in particular
how the runtime prevents untyped code from breaking static invariants. An
addition of an "Unknown or Dynamic type" (Review 2) is not enough to make
a gradual type system.

We distinguish optional and gradual typing in footnote 1. A good reference for 
this distinction is Siek et al SNAPL'15 (as requested by Review 2).

"Any" is effectively the same as `(U nil Object)`, and has no special runtime semantics.
It is *not* a Dynamic type (Review 2).

==========================================================================

We now address a few specific questions from the reviewers. The
reviewers also make several suggestions for presentation revisions and
improvements to the evaluation, including comparisons to other systems---we 
will make these changes in a revised version.

REVIEW 1: Section 5.1 should use tables instead of prose.

  We will restate the data in tables.

REVIEW 1: Is TC decidable? `restrict` seems problematic.

  The calculus leaves the details of `restrict` up to implementations. core.typed
  features an ad-hoc intersection type, so `restrict` simply returns the intersection 
  of both types, thus making the occurrence typing implementation decidable.

REVIEW 1: Why can't the type system check Example 9? 
          What restrictions are imposed on HMaps?

  For presentational reasons we only support a specific pattern of looking up
  a common, known key in a union of HMaps (notice T-GetHMap (Fig. 10) is the only rule
  supporting lookups on unions of HMaps). Example 9 is checkable in core.typed, 
  but not the calculus, and serves as a demonstration of the kinds of patterns
  that might occur in Clojure code.

REVIEW 1: What specific patterns could not be supported by TC that led to CircleCI
          abandoning it?

  We refer to the detailed blog post they published: 

    http://blog.circleci.com/why-were-no-longer-using-core-typed/

REVIEW 3: Are the case studies representative programs that would be good candidates 
          for optional typing?

  We chose the CircleCI code base as it was a substantial size. The other case
  study was a randomly chosen open source project. A goal of Typed Clojure is to support
  as many Clojure idioms as possible, and we learnt valuable lessons from both projects
  in this regard.

REVIEW 1: How is TC compiled/used in practice? Is it sealed from untyped namespaces?

  TC is compiled to as normal Clojure code. As alluded to in Footnote 1,
  Typed Clojure is not gradually typed.

REVIEW 1: "Java cannot be passed nil"?

  This is a conservative assumption, as the paper states in the same sentence.
  In practice this is a reasonable default, as discussed in the CircleCI evaluation (5.1).

REVIEW 1: Does (dissoc k) just remove its argument-entry from a map?

  (dissoc m k) returns a new map that is like m, but without a k entry.

REVIEW 1: How do symbolic representations of objects in OT relate to Scala's
          path-dependent types?

  They are unrelated.

REVIEW 1: Formula (3) -- do the positive/negative statements mean that d
          is of type Nat, so N_d should be read as a proposition?

  Yes, N_d says d is a Nat, \overline{N_d} says d is not a Nat.

REVIEW 1: Are Java's generic classes (in particular collections) supported
          in TC type checking algorithm?

  No. TC however supports parametric polymorphism for Clojure collections and a manual subset
  of Java collections. In practice, this is sufficient for many interop situations.

REVIEW 1: The simplified syntax chosen for method calls works for compilers, but
          not IDE's. How do Clojure IDE's "incrementalize" type checking for code completion?

  This syntax is not arbitrary; (.method o) is sugar for (. o (method)) in Clojure.
  Cursive Clojure prioritizes type hints assigned to variables in the local scope
  during method name autocompletion.
   
REVIEW 1: "Then (new[S] F "a/b") is checked against a nilable conversion..."?

  The prose should be fixed to instead read "non-nilable".

REVIEW 1: What is the type of (defmethod e_m e_v e_f)?

  As shown in T-DefMethod, it returns the same type as e_m.

REVIEW 1: How overlapping multi-method clauses are handled?

  In the type system, each method is checked in isolation with respect to 
  just the current dispatch value and the dispatch function type.
  In the operational semantics, B-BetaMulti can only fire if there is an unambiguous
  match, encoded in the GM metafunction.

REVIEW 2: What is "ann"?

  (ann v t) 'ann'otates variable v as type t. See examples in Section 2.2.
  We will explain this explicitly.

REVIEW 2: What is the "Kw" type?

   "Kw" is the type for keywords.

REVIEW 2: Why does 42 have the object "0"?

  There is no known way to derive 42 from the current environment, so we say the 
  object is "empty".
